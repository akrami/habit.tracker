generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  habits   Habit[]
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String   @default("#6366f1")
  icon        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  habits Habit[]

  @@unique([name])
}

model Habit {
  id          String      @id @default(cuid())
  name        String
  description String?
  color       String      @default("#6366f1")
  icon        String?
  frequency   String      @default("DAILY")
  target      Int         @default(1)
  unit        String?
  reminderTime DateTime?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  userId     String
  categoryId String?

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  entries HabitEntry[]
  goals   Goal[]
  tags    HabitTag[]

  @@index([userId])
}

model HabitEntry {
  id        String   @id @default(cuid())
  date      DateTime
  value     Int      @default(1)
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  habitId String
  habit   Habit  @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@unique([habitId, date])
  @@index([habitId, date])
}

model Goal {
  id          String    @id @default(cuid())
  title       String
  description String?
  target      Int
  deadline    DateTime?
  isCompleted Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  habitId String
  habit   Habit  @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@index([habitId])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  color     String   @default("#6366f1")
  createdAt DateTime @default(now())

  habits HabitTag[]
}

model HabitTag {
  habitId String
  tagId   String

  habit Habit @relation(fields: [habitId], references: [id], onDelete: Cascade)
  tag   Tag   @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([habitId, tagId])
}

